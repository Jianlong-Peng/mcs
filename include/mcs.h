/*=============================================================================
#     FileName: mcs.h
#         Desc: 
#       Author: jlpeng
#        Email: jlpeng1201@gmail.com
#     HomePage: 
#      Created: 2013-04-09 16:32:44
#   LastChange: 2013-04-11 10:12:36
#      History:
=============================================================================*/
#ifndef  MCS_MCS_H
#define  MCS_MCS_H

// ref: Hattori M. et al. J. AM. CHEM. SOC. 2003, 25(39):11853-11865
// KEGG SIMCOMP
// refined based on Bron-Kerbosch algorithm

#include <vector>
#include <utility>
#include "graph.h"

using std::vector;
using std::pair;
// Parameter:
// - g1, g2:
// - rmax: maximum number of recursion steps for clique finding
// - smin: to eliminate any small SCCSs whose cardinality is lower than 'smin'
// - atomMapWeight: - to determine the weight of atom mapping and
//                    the node value(weight) of association graph
//                  - default:
//                     1.0 - g1->getNodeLabelOf(i1)==g2->getNodeLabelOf(i2)
//                     0.0 - otherwise
//                  - if 'atomMapWeight' returns 0, the corresponding node will not be created.
vector<pair<vector<int>, vector<int> > > findMCS(const MCSGraph *g1, const MCSGraph *g2,
        int rmax=15000, int smin=2,
        float (*atomMapWeight)(const MCSGraph *g1, int i1, const MCSGraph *g2, int i2)=NULL);


// to get the mapping(s) that have minimum number of connection change between two graphs
// (minimize "number of mapping atoms that have non-mapping neighbors")
// (         "number of bond changes within mapping atoms")
// Parameter:
// - g1, g2
// - mcs: generated by 'findMCS'
// Return:
// - indices of desried mappings from 'mcs'
vector<int> mapWithMinChange(const MCSGraph *g1, const MCSGraph *g2,
        const vector<pair<vector<int>,vector<int> > > &mcs);

#endif   /* ----- #ifndef MCS_MCS_H  ----- */

